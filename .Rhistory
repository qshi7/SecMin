Flgd <- Flagged
data1.A <- cbind(Flgd,Z_sum.A,HT.A,lz.A,theta.A,tau.A,response.A,RT)
##################### Feature selection #####################
#load the library
#library(mlbench)
#library(caret)
# calculate correlation matrix
correlationMatrix.A <- cor(data1.A)
# summarize the correlation matrix
#print(correlationMatrix.A)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated.A <- caret::findCorrelation(correlationMatrix.A, cutoff=0.8)
if (length(highlyCorrelated.A) > 0) {
name.highlyCorrelated <- colnames(data1.A)[as.numeric(highlyCorrelated.A)]
highlyCorrelated <- highlyCorrelated.A - 1
names(highlyCorrelated) <- paste("Highly Correlated Variable:", name.highlyCorrelated)
selected.features <<- data1.A[,-c(1,as.numeric(highlyCorrelated.A))]
full.features <<- data1.A[,-1]
return(highlyCorrelated)
} else {
selected.features <<- data1.A[,-1]
full.features <<- data1.A[,-1]
return("Highly Correlated Variable: None")
}
View(data1.A)
data1.A <- cbind(Flgd,Z_sum.A,HT.A,lz.A,theta.A,tau.A,response.A,RT)
roxygen2::roxygenise()
load("~/Desktop/SecMin/data/RT.rda")
load("~/Desktop/SecMin/data/Info.rda")
load("~/Desktop/SecMin/data/Resp.rda")
load("~/Desktop/SecMin/data/Flagged.rda")
load_all()
library(SecMin)
dv(RT,Resp)
ini <- prepini(RT,Resp)
library(ltm)
est <- prim(ini)
#plot(est)
plot(est,alpha = 10)
ftr <- prepftr(est,RT,Resp,Flagged,Info)
ftr
roxygen2::roxygenize()
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
roxygen2::roxygenize()
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
ftr
load("~/Desktop/SecMin/data/RT.rda")
load("~/Desktop/SecMin/data/RT.rda")
load("~/Desktop/SecMin/data/Info.rda")
load("~/Desktop/SecMin/data/Resp.rda")
load("~/Desktop/SecMin/data/Flagged.rda")
roxygen2::roxygenize()
load_all()
library(SecMin)
dv(RT,Resp)
ini <- prepini(RT,Resp)
library(ltm)
est <- prim(ini)
#plot(est)
plot(est,alpha = 10)
ftr <- prepftr(est,RT,Resp,Flagged,Info)
roxygen2::roxygenize()
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
ftr
class(ftr)
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
View(ftr)
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
View(ftr)
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
View(ftr)
ftr[[1]]
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
ftr
View(ftr)
View(est)
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
View(ftr)
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
View(ftr)
load_all()
load("~/Desktop/SecMin/data/RT.rda")
load("~/Desktop/SecMin/data/Info.rda")
load("~/Desktop/SecMin/data/Resp.rda")
load("~/Desktop/SecMin/data/Flagged.rda")
load_all()
library(SecMin)
dv(RT,Resp)
ini <- prepini(RT,Resp)
View(ini)
load_all()
ini <- prepini(RT,Resp)
View(ini)
ini[["RT"]]
library(ltm)
est <- prim(ini)
View(est)
#plot(est)
plot(est,alpha = 10)
ftr <- prepftr(est,RT,Resp,Flagged,Info)
ftr <- prepftr(est,RT,Resp,Flagged,Info)
unsprvs(selected.features,Flagged)
ftr <- prepftr(est,RT,Resp,Flagged,Info)
est <- prim(ini)
#plot(est)
plot(est,alpha = 10)
load("~/Desktop/SecMin/data/RT.rda")
load("~/Desktop/SecMin/data/Info.rda")
load("~/Desktop/SecMin/data/Resp.rda")
load("~/Desktop/SecMin/data/Flagged.rda")
load_all()
library(SecMin)
dv(RT,Resp)
ini <- prepini(RT,Resp)
library(ltm)
View(ini)
est <- prim(ini)
#plot(est)
plot(est,alpha = 10)
ftr <- prepftr(est,RT,Resp,Flagged,Info)
fit.A <- mirt(Resp,1,itemtype='Rasch')
#fit.A
fit.item.A <- coef(fit.A, IRTpars=T,as.data.frame=T)
theta.A <- as.vector(fscores(fit.A))
hist(theta.A)
tau.A <- SecMin.obj[["speed"]][[3]]
est <- SecMin.obj
SecMin.obj <- est
tau.A <- SecMin.obj[["speed"]][[3]]
response.A <- Resp #item response
Z_sum.A <- SecMin.obj[["Z.score"]]  #ltz
KLD.A <- SecMin.obj[["KLD.value"]] #KLD index value
Ht.psf.A <- SecMin.obj[["Ht.psf"]]
names(Ht.psf.A$PFscores)[names(Ht.psf.A$PFscores) == "PFscores"] <- 'Ht'
HT.A <- unlist(Ht.psf.A$PFscores)
names(Ht.psf.A$PFscores)
Ht.psf.A <- SecMin.obj[["Ht.psf"]]
View(SecMin.obj)
tau.A <- SecMin.obj[[3]][[3]]
View(SecMin.obj)
str(SecMin.obj)
head(SecMin.obj)
load_all()
ftr <- prepftr(est,RT,Resp,Flagged,Info)
tau.A <- SecMin.obj[[3]][[3]]
response.A <- Resp #item response
Z_sum.A <- SecMin.obj[[7]]  #ltz
KLD.A <- SecMin.obj[[6]] #KLD index value
Ht.psf.A <- SecMin.obj[[8]]
names(Ht.psf.A$PFscores)[names(Ht.psf.A$PFscores) == "PFscores"] <- 'Ht'
HT.A <- unlist(Ht.psf.A$PFscores)
HT.A[which(is.na(HT.A))] <- 0.3   ##### suggested by Sijtsma & Molenaar(2002) reported that 0.3 is a critical value for coefficient H
Lzstar.psf.A <- SecMin.obj[[9]]
names(Lzstar.psf.A$PFscores)[names(Lzstar.psf.A$PFscores) == "PFscores"] <- 'Lzstart'
lz.A <- Lzstar.psf.A$PFscores
NCI.psf.A <- SecMin.obj[[10]]
names(NCI.psf.A$PFscores)[names(NCI.psf.A$PFscores) == "PFscores"] <- 'NCI'
NCI.A <- NCI.psf.A$PFscores
Z_sum.A[is.na(Z_sum.A) == TRUE] <- 600
KLD.A[which(is.na(KLD.A) == TRUE)] <- 2811
RT[is.na(RT) == TRUE] <- 0
#trying with different feature set
colnames(RT) <- paste0("idur.",1:ncol(RT))
data1.A <- cbind(Flgd,Z_sum.A,HT.A,lz.A,theta.A,tau.A,response.A,RT)
Flgd <- Flagged
data1.A <- cbind(Flgd,Z_sum.A,HT.A,lz.A,theta.A,tau.A,response.A,RT)
##################### Feature selection #####################
#load the library
#library(mlbench)
#library(caret)
# calculate correlation matrix
correlationMatrix.A <- cor(data1.A)
SecMin.obj[[3]][[3]]
SecMin.obj[[3]]
SecMin.obj[[7]]
SecMin.obj[[3]]$Mean
tau.A <- SecMin.obj[[3]]
View(tau.A)
class(tau.A)
tau.A <- as.data.frame(SecMin.obj[[3]])$Mean
response.A <- Resp #item response
Z_sum.A <- SecMin.obj[[7]]  #ltz
KLD.A <- SecMin.obj[[6]] #KLD index value
Ht.psf.A <- SecMin.obj[[8]]
names(Ht.psf.A$PFscores)[names(Ht.psf.A$PFscores) == "PFscores"] <- 'Ht'
HT.A <- unlist(Ht.psf.A$PFscores)
HT.A[which(is.na(HT.A))] <- 0.3   ##### suggested by Sijtsma & Molenaar(2002) reported that 0.3 is a critical value for coefficient H
Lzstar.psf.A <- SecMin.obj[[9]]
names(Lzstar.psf.A$PFscores)[names(Lzstar.psf.A$PFscores) == "PFscores"] <- 'Lzstart'
lz.A <- Lzstar.psf.A$PFscores
NCI.psf.A <- SecMin.obj[[10]]
names(NCI.psf.A$PFscores)[names(NCI.psf.A$PFscores) == "PFscores"] <- 'NCI'
NCI.A <- NCI.psf.A$PFscores
Z_sum.A[is.na(Z_sum.A) == TRUE] <- 600
KLD.A[which(is.na(KLD.A) == TRUE)] <- 2811
RT[is.na(RT) == TRUE] <- 0
#trying with different feature set
colnames(RT) <- paste0("idur.",1:ncol(RT))
data1.A <- cbind(Flgd,Z_sum.A,HT.A,lz.A,theta.A,tau.A,response.A,RT)
##################### Feature selection #####################
#load the library
#library(mlbench)
#library(caret)
# calculate correlation matrix
correlationMatrix.A <- cor(data1.A)
# summarize the correlation matrix
#print(correlationMatrix.A)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated.A <- caret::findCorrelation(correlationMatrix.A, cutoff=0.8)
roxygen2::roxygenize()
load_all()
load("~/Desktop/SecMin/data/RT.rda")
load("~/Desktop/SecMin/data/Info.rda")
load("~/Desktop/SecMin/data/Resp.rda")
load("~/Desktop/SecMin/data/Flagged.rda")
load("~/Desktop/SecMin/data/RT.rda")
load("~/Desktop/SecMin/data/Info.rda")
load("~/Desktop/SecMin/data/Resp.rda")
load("~/Desktop/SecMin/data/Flagged.rda")
library(SecMin)
dv(RT,Resp)
ini <- prepini(RT,Resp)
library(ltm)
est <- prim(ini)
#plot(est)
plot(est,alpha = 10)
ftr <- prepftr(est,RT,Resp,Flagged,Info)
View(ftr)
unsprvs(ftr[[1]],Flagged)
sprvs(ftr[[1]],Flagged)
check()
build()
library(SecMin)
build()
load("~/Desktop/SecMin/data/RT.rda")
load("~/Desktop/SecMin/data/Info.rda")
load("~/Desktop/SecMin/data/Resp.rda")
load("~/Desktop/SecMin/data/Flagged.rda")
load_all()
dv(RT,Resp)
ini <- prepini(RT,Resp)
View(ini)
est <- prim(ini)
#plot(est)
plot(est,alpha = 10)
ftr <- prepftr(est,RT,Resp,Flagged,Info)
View(ftr)
unsprvs(ftr[[1]],Flagged)
install.packages("~/Library/CloudStorage/Box-Box/Share_Zhou (Kaiwen Man)/R-package/SecMin_0.0.0.9000.tar.gz", repos = NULL, type = "source")
roxygen2::roxygenize()
check
check()
roxygen2::roxygenize()
check()
load_all()
ini <- prepini(RT,Resp) # set the inital values
library(ltm) # need to call this package first
est <- prim(ini) # fit the log-normal RT model
View(est)
ftr <- prepftr(est,RT,Resp,Flagged,Info) # prepare features to be used in machine learning models
load_all()
sprvs(ftr[[1]],Flagged) #supervised learner
sprvs(ftr[[1]],Flagged,ntree = 50) #supervised learner
load_all()
sprvs(ftr[[1]],Flagged,ntree = 50) #supervised learner
load_all()
sprvs(ftr[[1]],Flagged,n.tree = 50) #supervised learner
randomForest
Flgd <- Flagged
data <- ftr[[1]]
all.data <- cbind(data,Flgd)
maxs <- apply(all.data, 2, max)
mins <- apply(all.data, 2, min)
scaled.A <- as.data.frame(scale(all.data, center = mins, scale = maxs - mins))
#### random sampling the training all.dataset
#library(class)
set.seed(1234)
ind <- sample(2, nrow(all.data), replace=TRUE, prob=c(0.66, 0.34))
KNN.A.training <- as.data.frame(scaled.A[ind==1,])
KNN.A.test <-  as.data.frame(scaled.A[ind==2,])
#length(KNN.A.training)
#length(KNN.A.trainLabels)
#nrow(KNN.A.test)
#head(KNN.A.training);head(KNN.A.test)
KNN.A.trainLabels <- all.data$Flgd[ind==1]
KNN.A.testLabels  <- all.data$Flgd[ind==2]
set.seed(2234)
KNN.A.predict <- class::knn(train=KNN.A.training,test=KNN.A.test,cl=KNN.A.trainLabels,k=2,prob = T)
#ctrl <- trainControl(method="repeatedcv",repeats = 3)
#knnFit <- train(class ~ ., all.data = as.matrix(KNN.A.training), method = "knn", rControl = ctrl)
#knnFit
KNN.pred <- as.numeric(KNN.A.predict)
KNN.pred <- factor(KNN.pred,levels = c(1,2),labels = c("cheated","not cheated"))
KNN.testlabels <- factor(KNN.A.testLabels,levels = c(0,1),labels = c("cheated","not cheated"))
KNN.cm <- caret::confusionMatrix(KNN.pred,KNN.testlabels)
### Random forest #####
set.seed(3234)
ind.rf <- sample(2, nrow(all.data), replace=TRUE, prob=c(0.66, 0.34))
RF.A.training <- as.data.frame(scaled.A[ind.rf ==1,])
RF.A.test <-  as.data.frame(scaled.A[ind.rf ==2,])
#require(randomForest,quietly=T)
#RF.A.training <- RF.A.training
#names(RF.A.training)
RF.A.training <- cbind(RF.A.training[!sapply(RF.A.training, is.list)],
(t(apply(RF.A.training[sapply(RF.A.training, is.list)], 1, unlist))))
names(RF.A.training) <- make.names(names(RF.A.training))
RF.A.trainLabels <- all.data$Flgd[ind.rf==1]
RF.A.testLabels <- all.data$Flgd[ind.rf==2]
varNames <- names(RF.A.training)
# Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("Flgd")]
# add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
# Add response variable and convert to a formula object
rf.form <- as.formula(paste("as.factor(Flgd)", varNames1, sep = " ~ "))
set.seed(4234)
ntree = 50
A.rf <- randomForest::randomForest(rf.form,as.matrix(RF.A.training), ntree = ntree, importance=T,na.action = na.omit, replace=F)
#print(A.rf)
plot(x=c(1:150),y=A.rf$err.rate[,1], xlab="Number of Trees", ylab="Error", type="n", main = "")
#print(A.rf)
plot(x=c(1:ntree),y=A.rf$err.rate[,1], xlab="Number of Trees", ylab="Error", type="n", main = "")
lines(x=c(1:ntree),y=A.rf$err.rate[,1], xlab="Number of Trees", ylab="Error", col=2, lty=1, lwd=2)
RF.A.test <- cbind(RF.A.test[!sapply(RF.A.test, is.list)],
(t(apply(RF.A.test[sapply(RF.A.test, is.list)], 1, unlist))))
names(RF.A.test) <- make.names(names(RF.A.test))
pred.A <- predict(A.rf, RF.A.test, probability=F)
RF.pred <- as.numeric(pred.A)
RF.pred <- factor(RF.pred,levels = c(1,2),labels = c("cheated","not cheated"))
RF.testlabels <- factor(RF.A.testLabels,levels = c(0,1),labels = c("cheated","not cheated"))
RF.cm <- caret::confusionMatrix(RF.pred, RF.testlabels)
# Determine the variable importance measures
#library(dplyr)
#library(ggraph)
#library(igraph)
A.rf.importance<-round(randomForest::importance(A.rf), 2)
randomForest::varImpPlot(A.rf, type=2, col="darkred", sort=TRUE, n.var=40,cex=0.8,main = "Variable Importance - Random Forest")
#title(main="Variable Importance - Random Forest", cex=2)
plot(A.rf, main = "OOB Error - Random Forest")
Supervised.Summary <- (list(
"KNN Results" = KNN.cm,
"Random Forest Results" = RF.cm))
load_all()
sprvs(ftr[[1]],Flagged,ntree = 50) #supervised learner
sprvs(ftr[[1]],Flagged,ntree = 20) #supervised learner
sprvs(ftr[[1]],Flagged,ntree = 15) #supervised learner
build()
build()
?randomForest::randomForest
load_all()
build()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
dv(RT,Resp)
dv(RT,Resp)
prepini(RT,Resp)
library(SecMin)
dv(RT,Resp)
library(devtools)
install.packages("~/Library/CloudStorage/Box-Box/Share_Zhou (Kaiwen Man)/R-package/SecMin_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(SecMin)
data("RT")
data("Resp")
data("Flagged")
data("Info")
library(SecMin)
data("RT")
data("Resp")
data("Flagged")
data("Info")
dv(RT,Resp)
ini <- prepini(RT,Resp)
View(ini)
ini[["ini.alpha"]]
ini[["ini.beta"]]
ini[["ini.speed"]]
View(ini)
library(roxygen2)
roxygenize()
load_all()
ini <- prepini(RT,Resp)
ini[["ini.speed"]]
ini[["ini.prec.speed"]]
ini[["ini.mu.ipar"]]
ini[["ini.prec.ipar"]]
library(ltm)
est <- prim(ini)
library(ltm)
est <- prim(ini)
est$alpha
est$beta
person.speed <- est$speed
head(person.speed, 10)
est$LZ.cheating.cases
est$KLD.cheating.cases
plot(est,alpha = 10)
plot(est,beta = c(1:3))
plot(est,speed = 20)
ftr <- prepftr(est, RT, Resp, Flagged, Info)
View(ftr)
roxygenize()
load_all()
unsprvs(ftr[["selected.features"]],Flagged)
ftr <- prepftr(est, RT, Resp, Flagged, Info)
unsprvs(ftr[["selected.features"]],Flagged)
library(SecMin)
data("RT")
data("Resp")
data("Flagged")
data("Info")
library(SecMin)
data("RT")
data("Resp")
data("Flagged")
data("Info")
dv(RT,Resp)
ini <- prepini(RT,Resp)
ini[["ini.alpha"]]
ini[["ini.beta"]]
ini[["ini.speed"]]
# Chunk 1
library(SecMin)
data("RT")
data("Resp")
data("Flagged")
data("Info")
# Chunk 2
dv(RT,Resp)
# Chunk 3
ini <- prepini(RT,Resp)
# Chunk 4
ini[["ini.alpha"]]
# Chunk 5
ini[["ini.beta"]]
# Chunk 6
ini[["ini.speed"]]
ini[["ini.mu.ipar"]]
ini[["ini.prec.ipar"]]
library(ltm)
est <- prim(ini)
est$alpha
est$beta
person.speed <- est$speed
head(person.speed, 10)
est$LZ.cheating.cases
est$KLD.cheating.cases
plot(est,alpha = 10)
plot(est,beta = c(1:3))
plot(est,speed = 20)
ftr <- prepftr(est, RT, Resp, Flagged, Info)
View(ftr)
unsprvs(ftr[["selected.features"]],Flagged)
sprvs(ftr[["selected.features"]], Flagged, ntree = 50)
sprvs(ftr[["selected.features"]], Flagged, ntree = 50)
check()
build()
install.packages("~/Library/CloudStorage/Box-Box/GitHub/SecMin_0.0.0.9000.tar.gz", repos = NULL, type = "source")
unsprvs(ftr[["selected.features"]], Flagged)
sprvs(ftr[["selected.features"]], Flagged, ntree = 50)
sprvs(ftr[["selected.features"]], Flagged, ntree = 50)
sprvs(ftr[["selected.features"]], Flagged, ntree = 50)
install.packages('GDINA')
?person
?GDINA
??GDINA
?caret::confusionMatrix
library(devtools) ## then install the SecMin package
library(SecMin)
data("RT") ## need to click the data in the global environment to make it appear
data("Resp")
data("Info")
data("Flagged")
force(Flagged)
force(Info)
force(Resp)
force(RT)
ini <- prepini(RT,Resp) # set the inital values
library(ltm) # need to call this package first
est <- prim(ini) # fit the log-normal RT model
est <- prim(ini) # fit the log-normal RT model
ftr <- prepftr(est,RT,Resp,Flagged,Info) # prepare features to be used in machine learning models
unsprvs(ftr[[1]],Flagged) # unsupervised learner
unsupervised = unsprvs(ftr[[1]],Flagged) # unsupervised learner
View(unsupervised)
View(ini)
View(est)
est$KLD.value
est$NCI.value
sprvs(ftr[["selected.features"]], Flagged, ntree = 50)
sprvs(ftr[["selected.features"]], Flagged, ntree = 15)
sprvs(ftr[["selected.features"]], Flagged, ntree = 15)
sprvs(ftr[["selected.features"]], Flagged, ntree = 20)
sprvs(ftr[["selected.features"]], Flagged, ntree = 20)
View(ini)
ncol(ini[['Resp']])
library(devtools)
load_all()
